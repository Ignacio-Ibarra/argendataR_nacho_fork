% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/write_output.R
\name{write_output}
\alias{write_output}
\title{Genera json y csv con metadata y data de output para argendata}
\usage{
write_output(
  data = NULL,
  extension = "csv",
  output_name = NULL,
  directorio = NULL,
  subtopico = NULL,
  fuentes = NULL,
  analista = NULL,
  aclaraciones = NULL,
  exportar = TRUE,
  control = NULL,
  pk = NULL,
  es_serie_tiempo = TRUE,
  columna_indice_tiempo = NULL,
  columna_geo_referencia = NULL,
  nivel_agregacion = NULL,
  nullables = FALSE,
  etiquetas_indicadores = NULL,
  unidades = NULL,
  classes = NULL
)
}
\arguments{
\item{data}{dataframe Dataframe con datos de output. \code{class(data)} debe ser 'data.frame'. Req. Default = NULL}

\item{extension}{string Extension con que se debe escribir el output exportado. Default = 'csv'}

\item{output_name}{string Nombre del output tal cual se usa para escribir el archivo csv. Req. Default = NULL}

\item{directorio}{string Ruta al directorio desde el cual cargar el archivo. Si es NULL toma tempdir()}

\item{subtopico}{string Codigo de 6 letras del subtopico al que pertenece. Req. Default = NULL}

\item{fuentes}{string Vector con los codigos de las fuentes usadas para el output segun aparecen en \code{fuentes()}.  Req. Default = NULL}

\item{analista}{string Vector con nombre/s de la/s persona/s que crearon originalmente el output. Req. Default = NULL}

\item{aclaraciones}{string o null Cadena de texto para asentar aclaraciones pertinentes sobre el output. Default = NULL}

\item{exportar}{logical Si es TRUE escribe un archivo con el path '{output_name}.{extension}' dentro de 'data/\{subtopico\}'. Default = TRUE}

\item{control}{list Lista que resulta de la comparacion entre output anterior y output nuevo. Ver \code{comparar_outputs()}}

\item{pk}{string o null Nombres de columnas que son primary key del output. Si es NULL toma todas las columnas como ok. Default NULL.}

\item{es_serie_tiempo}{logical Valor TRUE o FALSO indicando si el output es una serie de tiempo. Default  = TRUE}

\item{columna_indice_tiempo}{string o null Nombre de la columna indice de tiempo. Valores aceptados: 'anio', 'fecha'. Otras columnas de referencia temporal (semestre, trim, etc) deberian ser parse. Default = NULL}

\item{columna_geo_referencia}{string o null Nombre de la columna con el codigo del area geografica si corresponde. Debe ser uno de   'iso3', 'cod_fundar', 'cod_pcia', 'cod_depto', 'eph_codagl', 'cod_aglo', 'cod_agl'. Default = NULL}

\item{nivel_agregacion}{string o null Nivel de agregacion al que se presentan los datos. Default  = NULL}

\item{nullables}{string o logical Vector con los nombres de las columnas que admiten nulls o valor logico TRUE o FALSE. Si es FALSE se considera que ninguna columna admite nulls, si es TRUE se considera que todas las columnas adminten nulls. Default = FALSE}

\item{etiquetas_indicadores}{list o null Lista nombrada con la etiqueta que le corresponde a las columnas. Los nombres de la lista deben coincidir con nombres de columnas de 'data'. Ejemplo: list('gini' = 'Indice de Gini', 'pbipcppp' = 'PBI per capita en parity purchase power'). Si es NULL(default), la funcion busca la columna 'indicador' en 'data' y toma como etiquetas los valores unicos de alli.}

\item{unidades}{list o null Lista nombrada con las unidades en que estan expresadas las columnas. Los nombres de la lista deben coincidir con nombres de columnas de 'data'. Ejemplo: list('gini' = 'indice', 'pbipcppp' = 'parity purchase power', 'population' = 'millones de personas'). Si es NULL (default), la funcion busca la columna 'unidad' en 'data' y genera una lista tomando las combinaciones unicas de 'unidad' e 'indicador' en 'data'.}

\item{classes}{list o null Si es null (default) la funcion genera una lista con las clases y nombres de columnas en data. Si es una lista los nombres de la lista deben coincidir con valores en la columna 'indicador' en 'data' y los valores deben ser: 'logical', 'character', 'double', 'interger' o 'date'.}
}
\value{
Escribe localmente un json con la data y metadata definida usando '{output_name}.json' como path. Opcionalmente tambien escribe un csv '{output_name}.csv'
}
\description{
Genera un json con la data y metadata del output para Argendata. Opcionalmente exporta tambien un archivo con el formato esperado en Argendata.
}
